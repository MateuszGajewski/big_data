{
  "paragraphs": [
    {
      "title": "faktyETL.scala",
      "text": "import org.apache.spark.sql._\r\nimport org.apache.spark.sql.functions.{date_format, split, to_date, unix_timestamp}\r\n\r\n//object FaktyETL {\r\n\r\n  def getPattern(line: String): String = {\r\n    val pattern = \"^In the region of (.+) on (.+) at (.+):.+ the following weather conditions were reported: (.+)$\".r\r\n    line match {\r\n      case pattern(auth, date, hour, conditions) => auth + \";\" + date + \";\" + hour.toInt + \";\" + conditions\r\n      case _ => \"\"\r\n    }\r\n  }\r\n\r\n  def main(args: Array[String]) {\r\n\r\n    val spark = SparkSession.builder()\r\n      .appName(\"FaktyETL\")\r\n      //.master(\"local\")\r\n      .enableHiveSupport()\r\n      .getOrCreate()\r\n    import spark.implicits._\r\n\r\n    spark.sql(\"DROP TABLE IF EXISTS f_fakty\")\r\n\r\n    val scotlandMainDS = spark.read.format(\"org.apache.spark.csv\")\r\n      .option(\"header\", true)\r\n      .option(\"inferSchema\", true)\r\n      .csv(args(0) + \"/mainDataScotland.csv\")\r\n      .cache()\r\n\r\n    val northEnglandMainDS = spark.read.format(\"org.apache.spark.csv\")\r\n      .option(\"header\", true)\r\n      .option(\"inferSchema\", true)\r\n      .csv(args(0) + \"/mainDataNorthEngland.csv\")\r\n      .cache()\r\n\r\n    val southEnglandMainDS = spark.read.format(\"org.apache.spark.csv\")\r\n      .option(\"header\", true)\r\n      .option(\"inferSchema\", true)\r\n      .csv(args(0) + \"/mainDataSouthEngland.csv\")\r\n      .cache()\r\n\r\n    val allDataDF = scotlandMainDS\r\n      .union(northEnglandMainDS)\r\n      .union(southEnglandMainDS)\r\n      .selectExpr(\"year\", \"count_date\", \"hour\", \"local_authoirty_ons_code\", \"road_name\", \"road_category\",\r\n        \"road_type\", \"stack(13, 'pedal_cycles', pedal_cycles, 'two_wheeled_motor_vehicles', two_wheeled_motor_vehicles, \" +\r\n          \"'cars_and_taxis', cars_and_taxis, 'buses_and_coaches', buses_and_coaches, 'lgvs', lgvs, \" +\r\n          \"'hgvs_2_rigid_axle', hgvs_2_rigid_axle, 'hgvs_3_rigid_axle', hgvs_3_rigid_axle, \" +\r\n          \"'hgvs_4_or_more_rigid_axle', hgvs_4_or_more_rigid_axle, 'hgvs_3_or_4_articulated_axle', hgvs_3_or_4_articulated_axle, \" +\r\n          \"'hgvs_5_articulated_axle', hgvs_5_articulated_axle, 'hgvs_6_articulated_axle', hgvs_6_articulated_axle, \" +\r\n          \"'all_hgvs', all_hgvs, 'all_motor_vehicles', all_motor_vehicles) as (pojazd, liczba_pojazdow)\")\r\n      .withColumn(\"count_date\", date_format($\"count_date\", \"dd/MM/yyyy\"))\r\n\r\n\r\n    val katDrogiDF = spark.sql(\"Select * from w_kategoria_drogi\")\r\n    val przestrzenDF = spark.sql(\"Select * from w_przestrzen\")\r\n    val weatherDS = spark.sql(\"Select * from w_pogoda\")\r\n    val czasDS = spark.sql(\"Select * from w_czas\")\r\n    val typPojazduDS = spark.sql(\"Select * from w_typ_pojazdu\")\r\n    val weatherFromFile = spark.read.textFile(args(0) + \"/weather.txt\").map(line => getPattern(line)).filter(!_.equals(\"\"))\r\n      .withColumn(\"_tmp\", split($\"value\", \";\"))\r\n      .select($\"_tmp\".getItem(0).as(\"kod_obszaru_adm\"),\r\n        $\"_tmp\".getItem(1).as(\"data\"),\r\n        $\"_tmp\".getItem(2).as(\"godzina\"),\r\n        $\"_tmp\".getItem(3).as(\"pogoda\"))\r\n      .distinct()\r\n\r\n    val afterJoinWithCatDF = allDataDF.join(katDrogiDF, allDataDF(\"road_category\").equalTo(katDrogiDF(\"kategoria_drogi\")))\r\n      .drop(\"road_category\", \"road_type\", \"kategoria_drogi\", \"typ_drogi\")\r\n\r\n    val afterJoinWithPrzeDF = afterJoinWithCatDF.join(przestrzenDF, afterJoinWithCatDF(\"local_authoirty_ons_code\").equalTo(przestrzenDF(\"kod_obszaru_adm\")) &&\r\n      afterJoinWithCatDF(\"road_name\").equalTo(przestrzenDF(\"nazwa_drogi\")))\r\n      .drop(\"road_name\", \"nazwa_obszaru_adm\", \"nazwa_regionu\", \"nazwa_drogi\", \"kod_obszaru_adm\")\r\n\r\n    val afterJoinWithTextFileDF = afterJoinWithPrzeDF.join(weatherFromFile, afterJoinWithPrzeDF(\"local_authoirty_ons_code\").equalTo(weatherFromFile(\"kod_obszaru_adm\")) &&\r\n      afterJoinWithPrzeDF(\"hour\").equalTo(weatherFromFile(\"godzina\")) && afterJoinWithPrzeDF(\"count_date\").equalTo(weatherFromFile(\"data\")))\r\n      .drop(\"nazwa_obszaru_adm\", \"data\", \"godzina\", \"local_authoirty_ons_code\", \"kod_obszaru_adm\")\r\n      .withColumn(\"count_date\", date_format(unix_timestamp($\"count_date\", \"dd/MM/yyyy\").cast(\"timestamp\"), \"yyyy-MM-dd\"))\r\n\r\n    val afterJoinWithPogDF = afterJoinWithTextFileDF.join(weatherDS, afterJoinWithTextFileDF(\"pogoda\").equalTo(weatherDS(\"opis_pogody\")))\r\n      .drop(\"opis_pogody\", \"pogoda\")\r\n\r\n    val afterJoinWithCzasDF = afterJoinWithPogDF.join(czasDS, afterJoinWithPogDF(\"count_date\").equalTo(czasDS(\"data\")) &&\r\n      afterJoinWithPogDF(\"hour\").equalTo(czasDS(\"godzina\")))\r\n      .drop(\"dzien_tygodnia\", \"kwartal\", \"godzina\", \"miesiac\", \"rok\", \"data\", \"count_date\", \"year\", \"hour\")\r\n\r\n    val afterJoinWithTypDF = afterJoinWithCzasDF.join(typPojazduDS, afterJoinWithCzasDF(\"pojazd\").equalTo(typPojazduDS(\"typ_pojazdu\")))\r\n      .drop(\"kategoria\", \"silnikowy\", \"pojazd\", \"typ_pojazdu\")\r\n\r\n    val finalDataDF = afterJoinWithTypDF.withColumnRenamed(\"id_typ\", \"id_typ_pojazdu\")\r\n      .select(\"id_pogody\", \"id_przestrzen\", \"id_kat_drogi\", \"id_czas\", \"id_typ_pojazdu\", \"liczba_pojazdow\")\r\n\r\n    finalDataDF.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"f_fakty\")\r\n\r\n    println(\"Załadowano dane do tabeli wymiaru 'f_fakty'\")\r\n  }\r\n//}",
      "user": "anonymous",
      "dateUpdated": "2022-01-14T21:12:23+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "completionKey": "TAB",
          "editOnDblClick": false,
          "completionSupport": true,
          "language": "scala"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.sql._\nimport org.apache.spark.sql.functions.{date_format, split, to_date, unix_timestamp}\n\u001b[1m\u001b[34mgetPattern\u001b[0m: \u001b[1m\u001b[32m(line: String)String\u001b[0m\n\u001b[1m\u001b[34mmain\u001b[0m: \u001b[1m\u001b[32m(args: Array[String])Unit\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642193720184_991784953",
      "id": "paragraph_1642193720184_991784953",
      "dateCreated": "2022-01-14T20:55:20+0000",
      "dateStarted": "2022-01-14T21:12:23+0000",
      "dateFinished": "2022-01-14T21:12:24+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:47652"
    },
    {
      "text": "// val faktyETL = FaktyETL\n// faktyETL.main(Array(\"/user/tictactoe_pai_verify/project\"))\n\nmain(Array(\"/user/tictactoe_pai_verify/project\"))",
      "user": "anonymous",
      "dateUpdated": "2022-01-14T21:18:07+0000",
      "progress": 72,
      "config": {
        "editorSetting": {
          "completionKey": "TAB",
          "editOnDblClick": false,
          "completionSupport": true,
          "language": "scala"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Załadowano dane do tabeli wymiaru 'f_fakty'\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=51",
              "$$hashKey": "object:47941"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=52",
              "$$hashKey": "object:47942"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=53",
              "$$hashKey": "object:47943"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=54",
              "$$hashKey": "object:47944"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=55",
              "$$hashKey": "object:47945"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=56",
              "$$hashKey": "object:47946"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=57",
              "$$hashKey": "object:47947"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=64",
              "$$hashKey": "object:47948"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=69",
              "$$hashKey": "object:47949"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=70",
              "$$hashKey": "object:47950"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=71",
              "$$hashKey": "object:47951"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=72",
              "$$hashKey": "object:47952"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=73",
              "$$hashKey": "object:47953"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=74",
              "$$hashKey": "object:47954"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642193808124_192677032",
      "id": "paragraph_1642193808124_192677032",
      "dateCreated": "2022-01-14T20:56:48+0000",
      "dateStarted": "2022-01-14T21:13:42+0000",
      "dateFinished": "2022-01-14T21:17:20+0000",
      "status": "FINISHED",
      "$$hashKey": "object:47653"
    },
    {
      "title": "1. Liczba pojazdów wybranego typu w różnych regionach dla poszczególnych miesięcy",
      "text": "val options = spark.table(\"w_typ_pojazdu\").select(\"typ_pojazdu\", \"kategoria\").collect().map(item => (item(0), item(1).toString))\nval wybrany_typ_pojazdu = z.select(\"Typ pojazdu\", options)\n\nval czasDF = spark.table(\"w_czas\").select(\"id_czas\", \"miesiac\")\nval przestrzenDF = spark.table(\"w_przestrzen\").select(\"id_przestrzen\", \"nazwa_regionu\")\nval IDtyp = spark.table(\"w_typ_pojazdu\").where($\"typ_pojazdu\" === wybrany_typ_pojazdu).select($\"id_typ\").collect().map(_(0).toString).head.toInt\nval faktyDF = spark.table(\"f_fakty\").select(\"id_czas\", \"id_przestrzen\", \"id_typ_pojazdu\", \"liczba_pojazdow\").where($\"id_typ_pojazdu\" === IDtyp)\n\n\nval analysis1DF = faktyDF.join(czasDF, faktyDF(\"id_czas\") === czasDF(\"id_czas\"))\n    .join(przestrzenDF, faktyDF(\"id_przestrzen\") === przestrzenDF(\"id_przestrzen\"))\n    .groupBy(przestrzenDF(\"nazwa_regionu\"), czasDF(\"miesiac\"))\n    .agg(sum(faktyDF(\"liczba_pojazdow\")).as(\"liczba_pojazdow\"))\n    .orderBy($\"liczba_pojazdow\")\n    \nz.show(analysis1DF)",
      "user": "anonymous",
      "dateUpdated": "2022-01-14T22:48:38+0000",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "completionKey": "TAB",
          "editOnDblClick": false,
          "completionSupport": true,
          "language": "scala"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "editorHide": false,
        "title": true,
        "runOnSelectionChange": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "stackedAreaChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                },
                "lineChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": false
                },
                "table": {
                  "tableGridState": {
                    "columns": [
                      {
                        "name": "nazwa_regionu0",
                        "visible": true,
                        "width": "*",
                        "sort": {
                          "priority": 0,
                          "direction": "asc"
                        },
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "miesiac1",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "liczba_pojazdow2",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      }
                    ],
                    "scrollFocus": {},
                    "selection": [],
                    "grouping": {
                      "grouping": [],
                      "aggregations": [],
                      "rowExpandedStates": {}
                    },
                    "treeView": {},
                    "pagination": {
                      "paginationCurrentPage": 1,
                      "paginationPageSize": 250
                    }
                  }
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "nazwa_regionu",
                  "index": 0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "miesiac",
                  "index": 1,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "liczba_pojazdow",
                  "index": 2,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {
          "formName": "option1",
          "Typ Pojazdu": "option1",
          "TypPojazdu": "option1",
          "Typ pojazdu": "all_motor_vehicles"
        },
        "forms": {
          "Typ pojazdu": {
            "type": "Select",
            "options": [
              {
                "value": "hgvs_4_or_more_rigid_axle",
                "displayName": "4 or more rigid axle Heavy Goods Vehicle",
                "$$hashKey": "object:50667"
              },
              {
                "value": "hgvs_3_or_4_articulated_axle",
                "displayName": "3 and 4-articulated axle Heavy Goods Vehicle",
                "$$hashKey": "object:50668"
              },
              {
                "value": "hgvs_5_articulated_axle",
                "displayName": "5-articulated axle Heavy Goods Vehicle",
                "$$hashKey": "object:50669"
              },
              {
                "value": "hgvs_6_articulated_axle",
                "displayName": "6 or more articulated axle Heavy Goods Vehicle",
                "$$hashKey": "object:50670"
              },
              {
                "value": "all_hgvs",
                "displayName": "Heavy Goods Vehicle total",
                "$$hashKey": "object:50671"
              },
              {
                "value": "all_motor_vehicles",
                "displayName": "All Motor Vehicles",
                "$$hashKey": "object:50672"
              },
              {
                "value": "hgvs_2_rigid_axle",
                "displayName": "2-rigid axle Heavy Goods Vehicle",
                "$$hashKey": "object:50673"
              },
              {
                "value": "hgvs_3_rigid_axle",
                "displayName": "3-rigid axle Heavy Goods Vehicle",
                "$$hashKey": "object:50674"
              },
              {
                "value": "pedal_cycles",
                "displayName": "Pedal Cycles",
                "$$hashKey": "object:50675"
              },
              {
                "value": "two_wheeled_motor_vehicles",
                "displayName": "Two-wheeled motor vehicles",
                "$$hashKey": "object:50676"
              },
              {
                "value": "cars_and_taxis",
                "displayName": "Cars and Taxis",
                "$$hashKey": "object:50677"
              },
              {
                "value": "buses_and_coaches",
                "displayName": "Buses and coaches",
                "$$hashKey": "object:50678"
              },
              {
                "value": "lgvs",
                "displayName": "Light Goods Vans",
                "$$hashKey": "object:50679"
              }
            ],
            "name": "Typ pojazdu",
            "displayName": "Typ pojazdu",
            "defaultValue": "hgvs_4_or_more_rigid_axle",
            "hidden": false,
            "$$hashKey": "object:50656"
          }
        }
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "nazwa_regionu\tmiesiac\tliczba_pojazdow\nWales\t11\t12345\nSouth West\t11\t13294\nWest Midlands\t11\t33179\nEast of England\t11\t34963\nScotland\t7\t40319\nYorkshire and The Humber\t11\t47047\nLondon\t11\t48530\nNorth West\t11\t73068\nSouth East\t11\t98912\nScotland\t3\t217954\nNorth East\t3\t234824\nWales\t3\t343517\nScotland\t4\t388819\nWales\t7\t391834\nNorth East\t7\t404012\nNorth East\t4\t534995\nScotland\t10\t537075\nWales\t4\t537304\nScotland\t5\t652088\nScotland\t9\t741271\nWales\t9\t748693\nNorth East\t6\t776464\nScotland\t6\t788560\nWales\t10\t788818\nWales\t5\t822390\nWales\t6\t827602\nNorth East\t9\t858703\nNorth East\t10\t880728\nNorth East\t5\t926705\nSouth West\t3\t1098132\nLondon\t3\t1299329\nNorth West\t3\t1313367\nEast Midlands\t3\t1357048\nYorkshire and The Humber\t3\t1465157\nSouth West\t7\t1566725\nWest Midlands\t3\t1657059\nLondon\t7\t1835641\nLondon\t4\t1932759\nSouth West\t4\t1959856\nYorkshire and The Humber\t7\t2037713\nEast of England\t3\t2291404\nYorkshire and The Humber\t4\t2302543\nEast Midlands\t7\t2364843\nSouth West\t10\t2650233\nEast Midlands\t4\t2737685\nSouth West\t5\t2803000\nLondon\t10\t2814586\nYorkshire and The Humber\t10\t2885963\nNorth West\t7\t2961438\nLondon\t9\t2966928\nWest Midlands\t7\t3009473\nSouth West\t9\t3045252\nWest Midlands\t4\t3220619\nEast Midlands\t10\t3242886\nNorth West\t4\t3373815\nSouth West\t6\t3473763\nLondon\t5\t3518727\nYorkshire and The Humber\t9\t3550880\nEast Midlands\t9\t3604452\nLondon\t6\t3733934\nYorkshire and The Humber\t5\t3980498\nEast of England\t7\t4081728\nWest Midlands\t10\t4128254\nEast of England\t4\t4201487\nSouth East\t3\t4309668\nYorkshire and The Humber\t6\t4327195\nEast Midlands\t6\t4621987\nNorth West\t10\t4687851\nEast Midlands\t5\t4754728\nNorth West\t9\t5102975\nWest Midlands\t9\t5134040\nWest Midlands\t5\t5396393\nNorth West\t5\t5762791\nWest Midlands\t6\t6129181\nNorth West\t6\t6264890\nEast of England\t10\t7080767\nEast of England\t5\t7304934\nEast of England\t9\t7932248\nEast of England\t6\t8254677\nSouth East\t7\t8758549\nSouth East\t4\t8869963\nSouth East\t10\t12108247\nSouth East\t9\t15072515\nSouth East\t5\t16139811\nSouth East\t6\t17955761\n"
          },
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34moptions\u001b[0m: \u001b[1m\u001b[32mArray[(Any, String)]\u001b[0m = Array((hgvs_4_or_more_rigid_axle,4 or more rigid axle Heavy Goods Vehicle), (hgvs_3_or_4_articulated_axle,3 and 4-articulated axle Heavy Goods Vehicle), (hgvs_5_articulated_axle,5-articulated axle Heavy Goods Vehicle), (hgvs_6_articulated_axle,6 or more articulated axle Heavy Goods Vehicle), (all_hgvs,Heavy Goods Vehicle total), (all_motor_vehicles,All Motor Vehicles), (hgvs_2_rigid_axle,2-rigid axle Heavy Goods Vehicle), (hgvs_3_rigid_axle,3-rigid axle Heavy Goods Vehicle), (pedal_cycles,Pedal Cycles), (two_wheeled_motor_vehicles,Two-wheeled motor vehicles), (cars_and_taxis,Cars and Taxis), (buses_and_coaches,Buses and coaches), (lgvs,Light Goods Vans))\n\u001b[1m\u001b[34mwybrany_typ_pojazdu\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = all_motor_vehicles\n\u001b[1m...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=491",
              "$$hashKey": "object:50680"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=492",
              "$$hashKey": "object:50681"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=493",
              "$$hashKey": "object:50682"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=494",
              "$$hashKey": "object:50683"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=499",
              "$$hashKey": "object:50684"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=500",
              "$$hashKey": "object:50685"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=501",
              "$$hashKey": "object:50686"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642186695164_1004153106",
      "id": "paragraph_1642186695164_1004153106",
      "dateCreated": "2022-01-14T18:58:15+0000",
      "dateStarted": "2022-01-14T22:48:39+0000",
      "dateFinished": "2022-01-14T22:48:42+0000",
      "status": "FINISHED",
      "$$hashKey": "object:47654"
    },
    {
      "title": "2. Liczba pojazdów różnych typów poruszających się danym typem drogi w zależności od warunków pogodowych",
      "text": "val options = spark.table(\"w_pogoda\").select(\"id_pogody\", \"opis_pogody\").collect().map(item => (item(0), item(1).toString))\nval wybrana_pogoda = z.select(\"Typ pogody\", options)\n\nval typyDF = spark.table(\"w_typ_pojazdu\").select(\"id_typ\", \"kategoria\")\nval drogiDF = spark.table(\"w_kategoria_drogi\").select(\"id_kat_drogi\", \"typ_drogi\")\n\nval faktyDF = spark.table(\"f_fakty\").select(\"id_pogody\", \"id_kat_drogi\", \"id_typ_pojazdu\", \"liczba_pojazdow\").where($\"id_pogody\" === wybrana_pogoda)\n\n\nval analysis2DF = faktyDF.join(drogiDF, faktyDF(\"id_kat_drogi\") === drogiDF(\"id_kat_drogi\"))\n    .join(typyDF, faktyDF(\"id_typ_pojazdu\") === typyDF(\"id_typ\"))\n    .groupBy(drogiDF(\"typ_drogi\"), typyDF(\"kategoria\"))\n    .agg(sum(faktyDF(\"liczba_pojazdow\")).as(\"liczba_pojazdow\"))\n    .orderBy($\"liczba_pojazdow\")\n    \nz.show(analysis2DF)",
      "user": "anonymous",
      "dateUpdated": "2022-01-14T23:01:56+0000",
      "progress": 100,
      "config": {
        "editorSetting": {
          "completionKey": "TAB",
          "editOnDblClick": false,
          "completionSupport": true,
          "language": "scala"
        },
        "colWidth": 12,
        "editorMode": "ace/mode/scala",
        "fontSize": 9,
        "runOnSelectionChange": true,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "typ_drogi": "string",
                      "kategoria": "string",
                      "liczba_pojazdow": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": false
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "kategoria",
                  "index": 1,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "typ_drogi",
                  "index": 0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "liczba_pojazdow",
                  "index": 2,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {
          "Typ pojazdu": "hgvs_3_or_4_articulated_axle",
          "Typ pogody": 9
        },
        "forms": {
          "Typ pogody": {
            "type": "Select",
            "options": [
              {
                "value": 1,
                "displayName": "Raining without high winds",
                "$$hashKey": "object:58647"
              },
              {
                "value": 3,
                "displayName": "Snowing without high winds",
                "$$hashKey": "object:58648"
              },
              {
                "value": 7,
                "displayName": "Fine without high winds",
                "$$hashKey": "object:58649"
              },
              {
                "value": 2,
                "displayName": "Snowing with high winds",
                "$$hashKey": "object:58650"
              },
              {
                "value": 6,
                "displayName": "Fine with high winds",
                "$$hashKey": "object:58651"
              },
              {
                "value": 8,
                "displayName": "Raining with high winds",
                "$$hashKey": "object:58652"
              },
              {
                "value": 9,
                "displayName": "Fog or mist",
                "$$hashKey": "object:58653"
              },
              {
                "value": 4,
                "displayName": "Unknown",
                "$$hashKey": "object:58654"
              },
              {
                "value": 5,
                "displayName": "Other",
                "$$hashKey": "object:58655"
              },
              {
                "value": 10,
                "displayName": "null",
                "$$hashKey": "object:58656"
              }
            ],
            "name": "Typ pogody",
            "displayName": "Typ pogody",
            "defaultValue": 1,
            "hidden": false,
            "$$hashKey": "object:58636"
          }
        }
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "typ_drogi\tkategoria\tliczba_pojazdow\nMinor\t6 or more articulated axle Heavy Goods Vehicle\t4514\nMinor\t5-articulated axle Heavy Goods Vehicle\t4569\nMinor\t4 or more rigid axle Heavy Goods Vehicle\t7030\nMinor\t3 and 4-articulated axle Heavy Goods Vehicle\t7557\nMinor\t3-rigid axle Heavy Goods Vehicle\t7557\nMinor\tTwo-wheeled motor vehicles\t25138\nMinor\tPedal Cycles\t39350\nMinor\t2-rigid axle Heavy Goods Vehicle\t50112\nMinor\tBuses and coaches\t51944\nMajor\tPedal Cycles\t63076\nMinor\tHeavy Goods Vehicle total\t77418\nMajor\t3 and 4-articulated axle Heavy Goods Vehicle\t109152\nMajor\t3-rigid axle Heavy Goods Vehicle\t109152\nMajor\t4 or more rigid axle Heavy Goods Vehicle\t117519\nMajor\tTwo-wheeled motor vehicles\t172240\nMajor\tBuses and coaches\t204060\nMajor\t6 or more articulated axle Heavy Goods Vehicle\t409609\nMajor\t5-articulated axle Heavy Goods Vehicle\t410157\nMinor\tLight Goods Vans\t431490\nMajor\t2-rigid axle Heavy Goods Vehicle\t655164\nMajor\tHeavy Goods Vehicle total\t1796239\nMinor\tCars and Taxis\t3104844\nMajor\tLight Goods Vans\t3400280\nMinor\tAll Motor Vehicles\t3690834\nMajor\tCars and Taxis\t20027787\nMajor\tAll Motor Vehicles\t25600606\n"
          },
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34moptions\u001b[0m: \u001b[1m\u001b[32mArray[(Any, String)]\u001b[0m = Array((1,Raining without high winds), (3,Snowing without high winds), (7,Fine without high winds), (2,Snowing with high winds), (6,Fine with high winds), (8,Raining with high winds), (9,Fog or mist), (4,Unknown), (5,Other), (10,null))\n\u001b[1m\u001b[34mwybrana_pogoda\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 1.0\n\u001b[1m\u001b[34mtypyDF\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id_typ: int, kategoria: string]\n\u001b[1m\u001b[34mdrogiDF\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [id_kat_drogi: int, typ_drogi: string]\n\u001b[1m\u001b[34mfaktyDF\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [id_pogody: bigint, id_kat_drogi: int ... 2 more fields]\n\u001b[1m\u001b[34manalysis2DF\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = ...\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=584",
              "$$hashKey": "object:58657"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=585",
              "$$hashKey": "object:58658"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=590",
              "$$hashKey": "object:58659"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=591",
              "$$hashKey": "object:58660"
            },
            {
              "jobUrl": "http://bigdatacluster-m.europe-west4-c.c.put-big-data-2021-10-wm-328022.internal:35113/jobs/job?id=592",
              "$$hashKey": "object:58661"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642191070481_248017329",
      "id": "paragraph_1642191070481_248017329",
      "dateCreated": "2022-01-14T20:11:10+0000",
      "dateStarted": "2022-01-14T23:01:56+0000",
      "dateFinished": "2022-01-14T23:01:58+0000",
      "status": "PENDING",
      "$$hashKey": "object:47655"
    },
    {
      "user": "anonymous",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "completionKey": "TAB",
          "editOnDblClick": false,
          "completionSupport": true,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642199377605_1877184600",
      "id": "paragraph_1642199377605_1877184600",
      "dateCreated": "2022-01-14T22:29:37+0000",
      "status": "READY",
      "$$hashKey": "object:47657"
    }
  ],
  "name": "project-uk-traffic",
  "id": "2GSMQ3UZA",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.1-SNAPSHOT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/project-uk-traffic"
}